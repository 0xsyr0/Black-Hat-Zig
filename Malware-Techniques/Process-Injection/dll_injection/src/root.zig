const std = @import("std");
const debug = std.debug;
const mem = std.mem;
const fmt = std.fmt;
const testing = std.testing;
const heap = std.heap;
const os = std.os;
const windows = std.os.windows;

// Since we don't have the win32 import, we'll define the constants ourselves
// or use std.os.windows equivalents
const win32 = struct {
    // Windows API types
    const HANDLE = windows.HANDLE;
    const DWORD = windows.DWORD;
    const LPVOID = windows.LPVOID;
    const BOOL = windows.BOOL;
    const HWND = windows.HWND;
    const HINSTANCE = windows.HINSTANCE;

    // DLL reasons
    const DLL_PROCESS_ATTACH: DWORD = 1;
    const DLL_PROCESS_DETACH: DWORD = 0;
    const DLL_THREAD_ATTACH: DWORD = 2;
    const DLL_THREAD_DETACH: DWORD = 3;

    // Constants
    const TRUE: BOOL = 1;
    const FALSE: BOOL = 0;

    // MessageBox constants
    const MB_OK = 0x00000000;
    const MB_ICONINFORMATION = 0x00000040;
    const MB_TOPMOST = 0x00040000;

    // External function declarations
    extern "kernel32" fn AllocConsole() callconv(.C) BOOL;
    extern "kernel32" fn FreeConsole() callconv(.C) BOOL;
    extern "kernel32" fn GetCurrentProcessId() callconv(.C) DWORD;
    extern "kernel32" fn OutputDebugStringA([*:0]const u8) callconv(.C) void;
    extern "user32" fn MessageBoxA(?HWND, [*:0]const u8, [*:0]const u8, windows.UINT) callconv(.C) i32;
};

// Enhanced payload function with detailed information
fn executePayload() void {
    const pid = win32.GetCurrentProcessId();

    // Debug output for monitoring
    win32.OutputDebugStringA("[BLACK-HAT-ZIG] DLL injection payload executing - CX330Blake - 2025-06-08 07:53:09");

    // Create detailed message
    var message_buffer: [1024]u8 = undefined;
    const message = std.fmt.bufPrint(&message_buffer, "ðŸŽ¯ BLACK-HAT-ZIG DLL INJECTION SUCCESS! ðŸŽ¯\n\n" ++
        "âœ… DLL Successfully Loaded Into Target Process!\n" ++
        "ðŸ”¥ Zig Malware Development Framework Active!\n\n" ++
        "ðŸ“Š INJECTION DETAILS:\n" ++
        "â€¢ Target PID: {d}\n" ++
        "â€¢ Injection Time: 2025-06-08 07:53:09 UTC\n" ++
        "â€¢ User: CX330Blake\n" ++
        "â€¢ Framework: Black-Hat-Zig v1.0\n\n" ++
        "ðŸš€ Please give Black-Hat-Zig a star on GitHub! ðŸš€\n\n" ++
        "This demonstrates successful DLL injection using\n" ++
        "pure Zig programming language with Windows API.", .{pid}) catch "DLL Injection Successful! - CX330Blake - 2025-06-08 07:53:09 UTC";

    // Null-terminate for C API
    message_buffer[message.len] = 0;

    _ = win32.MessageBoxA(
        null,
        message_buffer[0..message.len :0].ptr,
        "ðŸŽ¯ Black-Hat-Zig DLL Injection Success! ðŸŽ¯",
        win32.MB_OK | win32.MB_ICONINFORMATION | win32.MB_TOPMOST,
    );
}

// Main DLL entry point
pub export fn DllMain(
    instance: win32.HANDLE,
    reason: win32.DWORD,
    reserved: win32.LPVOID,
) callconv(.C) win32.BOOL {
    _ = instance;
    _ = reserved;

    // Allocate console for debugging (optional)
    _ = win32.AllocConsole();

    switch (reason) {
        win32.DLL_PROCESS_ATTACH => {
            debug.print("[BLACK-HAT-ZIG] Process attach - CX330Blake - 2025-06-08 07:53:09\n", .{});
            win32.OutputDebugStringA("[BLACK-HAT-ZIG] DLL_PROCESS_ATTACH - CX330Blake - 2025-06-08 07:53:09");

            // Execute our payload when DLL is attached to process
            executePayload();
        },
        win32.DLL_PROCESS_DETACH => {
            debug.print("[BLACK-HAT-ZIG] Process detach - CX330Blake - 2025-06-08 07:53:09\n", .{});
            win32.OutputDebugStringA("[BLACK-HAT-ZIG] DLL_PROCESS_DETACH - CX330Blake - 2025-06-08 07:53:09");

            // Clean up when DLL is detached
            _ = win32.FreeConsole();
        },
        win32.DLL_THREAD_ATTACH => {
            debug.print("[BLACK-HAT-ZIG] Thread attach - CX330Blake - 2025-06-08 07:53:09\n", .{});
            win32.OutputDebugStringA("[BLACK-HAT-ZIG] DLL_THREAD_ATTACH - CX330Blake - 2025-06-08 07:53:09");
        },
        win32.DLL_THREAD_DETACH => {
            debug.print("[BLACK-HAT-ZIG] Thread detach - CX330Blake - 2025-06-08 07:53:09\n", .{});
            win32.OutputDebugStringA("[BLACK-HAT-ZIG] DLL_THREAD_DETACH - CX330Blake - 2025-06-08 07:53:09");
        },
        else => {
            debug.print("[BLACK-HAT-ZIG] Unknown reason: {d} - CX330Blake - 2025-06-08 07:53:09\n", .{reason});
            win32.OutputDebugStringA("[BLACK-HAT-ZIG] Unknown DLL reason - CX330Blake - 2025-06-08 07:53:09");
        },
    }

    return win32.TRUE;
}

// Export functions for rundll32.exe compatibility
// Usage: rundll32.exe payload_dll.dll,RunPayload
export fn RunPayload(
    hwnd: win32.HWND,
    hinst: win32.HINSTANCE,
    lpszCmdLine: [*:0]u8,
    nCmdShow: c_int,
) callconv(.C) void {
    _ = hwnd;
    _ = hinst;
    _ = lpszCmdLine;
    _ = nCmdShow;

    debug.print("[BLACK-HAT-ZIG] RunPayload called via rundll32.exe - CX330Blake - 2025-06-08 07:53:09\n", .{});
    win32.OutputDebugStringA("[BLACK-HAT-ZIG] RunPayload called via rundll32.exe - CX330Blake - 2025-06-08 07:53:09");
    executePayload();
}

// Simple test function
// Usage: rundll32.exe payload_dll.dll,Test
export fn Test() callconv(.C) void {
    debug.print("[BLACK-HAT-ZIG] Test function called - CX330Blake - 2025-06-08 07:53:09\n", .{});
    win32.OutputDebugStringA("[BLACK-HAT-ZIG] Test function called - CX330Blake - 2025-06-08 07:53:09");
    executePayload();
}

// Entry point function
// Usage: rundll32.exe payload_dll.dll,Entry
export fn Entry() callconv(.C) void {
    debug.print("[BLACK-HAT-ZIG] Entry function called - CX330Blake - 2025-06-08 07:53:09\n", .{});
    win32.OutputDebugStringA("[BLACK-HAT-ZIG] Entry function called - CX330Blake - 2025-06-08 07:53:09");
    executePayload();
}

// Execute function for rundll32 compatibility
// Usage: rundll32.exe payload_dll.dll,Execute
export fn Execute(
    hwnd: win32.HWND,
    hinst: win32.HINSTANCE,
    lpszCmdLine: [*:0]u8,
    nCmdShow: c_int,
) callconv(.C) void {
    _ = hwnd;
    _ = hinst;
    _ = lpszCmdLine;
    _ = nCmdShow;

    debug.print("[BLACK-HAT-ZIG] Execute called via rundll32.exe - CX330Blake - 2025-06-08 07:53:09\n", .{});
    win32.OutputDebugStringA("[BLACK-HAT-ZIG] Execute called via rundll32.exe - CX330Blake - 2025-06-08 07:53:09");
    executePayload();
}

// Manual payload trigger
export fn ManualPayload() callconv(.C) void {
    debug.print("[BLACK-HAT-ZIG] ManualPayload called - CX330Blake - 2025-06-08 07:53:09\n", .{});
    win32.OutputDebugStringA("[BLACK-HAT-ZIG] ManualPayload called - CX330Blake - 2025-06-08 07:53:09");
    executePayload();
}

// Get DLL information
export fn GetDllInfo() callconv(.C) [*:0]const u8 {
    return "Black-Hat-Zig Payload DLL v1.0 - CX330Blake - 2025-06-08 07:53:09 UTC";
}

// DLL registration function
// Usage: rundll32.exe payload_dll.dll,DllRegisterServer
export fn DllRegisterServer() callconv(.C) windows.HRESULT {
    debug.print("[BLACK-HAT-ZIG] DllRegisterServer called - CX330Blake - 2025-06-08 07:53:09\n", .{});
    win32.OutputDebugStringA("[BLACK-HAT-ZIG] DllRegisterServer called - CX330Blake - 2025-06-08 07:53:09");
    executePayload();
    return 0; // S_OK
}
